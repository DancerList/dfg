
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
import asyncio
import webbrowser

class Form(StatesGroup):
    Question = State()
    QuestionFormName = State()
    NumberPhone = State()
    Task = State()
    Sroki = State()

MAIN_CARD_BUTTONS_VERICIT = [
    ("–ó–∞–∫–∞–∑–∞—Ç—å –£—Å–ª—É–≥—É", "m_zakaz"),
    ("–û—Ç–∑—ã–≤—ã", "m_otzv"),
    ("–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "m_portoflio"),
]

def main_card_keyboard_vericitify():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_CARD_BUTTONS_VERICIT:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()

import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    kb_vericitify = main_card_keyboard_vericitify()
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥ –ø—Ä–æ–≥—Ä–æ–º–º–∏—Å—Ç–∞!",
        reply_markup=kb_vericitify
    )

@dp.callback_query(F.data == "m_zakaz")
async def Support(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è: ")
    await call.answer()
    await state.set_state(Form.QuestionFormName)

@dp.callback_query(F.data == "m_otzv")
async def Supporluygt(call: CallbackQuery, state: FSMContext):
    webbrowser.open("https://t.me/deltaOTZV")

@dp.callback_query(F.data == "m_portfolio")
async def Supporluygt(call: CallbackQuery, state: FSMContext):
    webbrowser.open("https://t.me/deltaChannelRU/4")

MAIN_CARD_BUTTONS = [
    ("–•–æ—Å—Ç–∏–Ω–≥", "r_–•–æ—Å—Ç–∏–Ω–≥"),
    ("–¢–µ–ª–µ–≥—Ä–∞–º –º–∏–Ω–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "r_–¢–µ–ª–µ–≥—Ä–∞–º–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
    ("–¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç", "r_–¢–µ–ª–µ–≥—Ä–∞–º–ë–æ—Ç"),
    ("2D –ò–Ω–¥–∏ –ò–≥—Ä–∞", "r_2D–ò–≥—Ä–∞–ò–Ω–¥–∏"),
    ("–ü–∫ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "r_–ü–∫–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
    ("–ò–ò –ë–æ—Ç", "r_–ò–ò–±–æ—Ç"),
    ("–í–µ–± —Å–∞–π—Ç", "r_–í–µ–±–°–∞–π—Ç"),
    ("–°–∫—Ä–∏–ø—Ç", "r_–°–∫—Ä–∏–ø—Ç"),
]


def main_card_keyboard():
    kb_builder = InlineKeyboardBuilder()
    for text, cb_data in MAIN_CARD_BUTTONS:
        kb_builder.button(text=text, callback_data=cb_data)
    kb_builder.adjust(1)
    return kb_builder.as_markup()



@dp.message(Form.QuestionFormName)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(nameUser = message.text)
    kb_strana = main_card_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=kb_strana)

@dp.callback_query(F.data.startswith("r_"))
async def process_menu_callback(call: CallbackQuery, state: FSMContext):
    action = call.data[len("r_"):]


    if action == "–•–æ—Å—Ç–∏–Ω–≥" or action == "–ò–ò–±–æ—Ç":
        await call.message.answer("–°—Ä–æ–∫–∏: 1-2 –¥–Ω—è")
        await call.message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å: 1400–†—É–±")

    else:
        await call.message.answer("–°—Ä–æ–∫–∏: 10-14 –¥–Ω–µ–π")
        await call.message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å: 3600–†—É–±")

    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    await state.update_data(uslugaUser = action)
    await state.set_state(Form.NumberPhone)

@dp.message(Form.NumberPhone)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(nubmerUser = message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É: ")
    await state.set_state(Form.Task)

@dp.message(Form.Task)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(taskUser = message.text)
    await message.answer("1.–í–≤–µ–¥–∏—Ç–µ '–ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏' –≤ —Ä–∞–∑–º–µ—Ä–µ 6 –¥–Ω–µ–π +500 –†—É–±–ª–µ–π –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å\n\n2.–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –≤ —É—Å–ª—É–≥–µ")
    await state.set_state(Form.Sroki)

@dp.message(Form.Sroki)
async def process_comment(message: Message, state: FSMContext):
    await state.update_data(srokiUser = message.text)
    await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≥—Ä–æ–º–º–∏—Å—Ç—É –º—ã –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è")
    data = await state.get_data()

    s = data.get('srokiUser')

    if s == "–ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏":
        sroki = "6 –¥–Ω–µ–π"
    else:
        sroki = s
await message.answer( f"üìù –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n" f"üë§ –ò–º—è: {data.get('nameUser')}\n\n" f"‚ú® –£—Å–ª—É–≥–∞: {data.get('uslugaUser')}\n\n" f"üìû –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data.get('numberUser')}\n\n" f"üìù –ó–∞–¥–∞—á–∞: {data.get('taskUser')}\n\n" f"‚è≥ –°—Ä–æ–∫–∏: {sroki}\n\n" f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏")

    if data["uslugaUser"] == "–•–æ—Å—Ç–∏–Ω–≥" or data["uslugaUser"] == "–ò–ò–±–æ—Ç":
        await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å: 1400 —Ä—É–±–ª–µ–π")
    else:
        if data["srokiUser"] == "–ë—ã—Å—Ç—Ä—ã–µ —Å—Ä–æ–∫–∏":
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å: 4100 —Ä—É–±–ª–µ–π")
        else:
            await message.answer("–°—Ç–æ–∏–º–æ—Å—Ç—å 3600 —Ä—É–±–ª–µ–π")

    await state.clear()

asyncio.run(dp.start_polling(bot))
